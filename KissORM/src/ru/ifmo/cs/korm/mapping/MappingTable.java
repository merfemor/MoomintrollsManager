package ru.ifmo.cs.korm.mapping;

import ru.ifmo.cs.korm.annotations.Attribute;
import ru.ifmo.cs.korm.annotations.Table;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class MappingTable {
    public final String name;
    private final List<MappingAttribute> notAutoGeneratedAttributes;
    private final List<MappingAttribute> autoGeneratedAttributes;
    private final List<MappingAttribute> idAttributes;

    public MappingTable(Class annotatedClass) throws IllegalArgumentException {
        // parse class
        Table table = (Table) annotatedClass.getAnnotation(Table.class);
        if (table == null) {
            throw new IllegalArgumentException(
                    "Class " + annotatedClass + " has no annotation " + Table.class);
        }
        name = table.name();

        // parse fields
        final int[] autoGenerated = {0};
        notAutoGeneratedAttributes = new ArrayList<>();
        autoGeneratedAttributes = new ArrayList<>();
        idAttributes = new ArrayList<>();

        do {
            Arrays.stream(annotatedClass.getDeclaredFields())
                    .map(field -> {
                        MappingAttribute ma = null;
                        try {
                            ma = new MappingAttribute(field);
                        } catch (NoSuchMethodException e) {
                            throw new IllegalArgumentException(e);
                        } catch (IllegalArgumentException ignored) {

                        }
                        return ma;
                    })
                    .filter(Objects::nonNull)
                    .forEach(ma -> {
                        if (ma.isAutoGenerated)
                            autoGeneratedAttributes.add(ma);
                        else
                            notAutoGeneratedAttributes.add(ma);
                        if (ma.isId)
                            idAttributes.add(ma);
                    });
        } while ((annotatedClass = annotatedClass.getSuperclass()) != null);

        if (notAutoGeneratedAttributes.isEmpty() && autoGeneratedAttributes.isEmpty()) {
            throw new IllegalArgumentException(
                    "No one field in class " + annotatedClass + " marked with annotation " + Attribute.class);
        }
    }

    public List<MappingAttribute> getNotAutoGeneratedAttributes() {
        return notAutoGeneratedAttributes;
    }

    public List<MappingAttribute> getAutoGeneratedAttributes() {
        return autoGeneratedAttributes;
    }

    public List<MappingAttribute> getIdAttributes() {
        return idAttributes;
    }

    public String getName() {
        return name;
    }
}
